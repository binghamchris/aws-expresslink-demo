AWSTemplateFormatVersion: "2010-09-09"
Description: IoT ExpressLink Demo
Parameters:
  ExpressLinkCertPem:
    Type: String
    Description: The PEM-formatted certificate retrieved from the AWS IoT ExpressLink demo badge. This must be the main body of the certificate, without the "BEGIN CERTIFICATE" and "END CERTIFICATE" lines.
  ExpressLinkThingName:
    Type: String
    Description: The thing name retrieved from the AWS IoT ExpressLink demo badge
  GithubRepoUrl:
    Type: String
    Description: The URL of the GitHub repo containing the demo web app.
    Default: https://github.com/binghamchris/aws-expresslink-demo-webapp
  GithubBranchName:
    Type: String
    Description: The name of branch in the GitHub repo to be used for deployment
    Default: main
  GithubToken:
    Type: String
    Description: The GitHub classic personal access token to be used during the setup of the Amplify app. Please see this page for details - https://docs.aws.amazon.com/amplify/latest/userguide/setting-up-GitHub-access.html#setting-up-github-app-cloudformation
  DemoWebAppDomainFqdn:
    Type: String
    Description: The domain the app should be served on. "demo." will be added to the beginning of this domain. If DNS dor the domain is *not* hosted by Route 53 in the same AWS account as this deployment, please see the AWS Amplify console after deployment to verify the domain and make the web app available
    AllowedPattern: ^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$
Resources:
  IoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: DemoBadgePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - iot:Connect
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - iot:Publish
            - iot:Receive
          Resource:
            - !Sub "arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topic/*"
        - Effect: Allow
          Action:
            - iot:Subscribe
          Resource:
            - !Sub "arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/*"
  IoTThing:
    Type: AWS::IoT::Thing
    Properties: 
      ThingName: !Ref ExpressLinkThingName
  ExpressLinkCert:
    Type: AWS::IoT::Certificate
    Properties: 
      CertificatePem: 
        !Sub |
          -----BEGIN CERTIFICATE-----
          ${ExpressLinkCertPem}
          -----END CERTIFICATE-----
      Status: ACTIVE
      CertificateMode: SNI_ONLY
  ThingCertAttach:
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties: 
      Principal: !GetAtt ExpressLinkCert.Arn
      ThingName: !Ref IoTThing
  CertPolicyAttach:
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties: 
      PolicyName: !Ref IoTPolicy
      Principal: !GetAtt ExpressLinkCert.Arn
  GetShadowRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - PolicyName: GetShadowPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - iot:GetThingShadow
              Resource:
                - !Sub "arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:thing/${IoTThing}"
            - Effect: Allow
              Action:
                - iot:DescribeEndpoint
              Resource:
                - "*"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource:
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/getShadow:*"
      RoleName: GetShadowRole  
  GetShadowFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: 
        - arm64
      Runtime: python3.9
      Handler: index.lambda_handler
      Code: 
        ZipFile: |
          import boto3
          import json
          import logging
          import os

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          THING_NAME = os.environ.get("THING_NAME", "")

          def lambda_handler(event, context):
            logger.debug("event:\n{}".format(json.dumps(event, indent=2)))

            try:
              client = boto3.client('iot')
              response = client.describe_endpoint(endpointType="iot:Data-ats")
              iot_endpoint = f"https://{response['endpointAddress']}"

              client = boto3.client(
                'iot-data', 
                endpoint_url=iot_endpoint
              )

              shadow = client.get_thing_shadow(
                  thingName=THING_NAME
              )
            except Exception as e:
              logger.error("{}".format(e))
              return("An error occurred, try again later") 

            return(json.loads(shadow['payload'].read())['state']['reported'])
      Environment: 
        Variables: 
          THING_NAME: !Ref IoTThing
      FunctionName: getShadow
      Role: !GetAtt GetShadowRole.Arn
  GetShadowFunctionUrlPermission:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref GetShadowFunction
       FunctionUrlAuthType: 'NONE'
       Action: lambda:InvokeFunctionUrl
       Principal: '*'
  GetShadowFunctionUrl:
    Type: AWS::Lambda::Url
    Properties: 
      AuthType: NONE
      Cors: 
        AllowCredentials: false
        AllowOrigins: 
          - "*"
      TargetFunctionArn: !GetAtt GetShadowFunction.Arn
  UpdateShadowRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies: 
        - PolicyName: UpdateShadowPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - iot:UpdateThingShadow
              Resource:
                - !Sub "arn:${AWS::Partition}:iot:${AWS::Region}:${AWS::AccountId}:thing/${IoTThing}"
            - Effect: Allow
              Action:
                - iot:DescribeEndpoint
              Resource:
                - "*"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource:
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/updateShadow:*"
      RoleName: UpdateShadowRole  
  UpdateShadowFunction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: 
        - arm64
      Runtime: python3.9
      Handler: index.lambda_handler
      Code: 
        ZipFile: |
          import boto3
          import json
          import logging
          import os

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          THING_NAME = os.environ.get("THING_NAME", "")

          def lambda_handler(event, context):
            logger.info("event:\n{}".format(json.dumps(event, indent=2)))

            try:
              client = boto3.client('iot')
              response = client.describe_endpoint(endpointType="iot:Data-ats")
              iot_endpoint = f"https://{response['endpointAddress']}"

              client = boto3.client(
                'iot-data', 
                endpoint_url=iot_endpoint
              )
              
              if event['body']:
                request = json.loads(event['body'])
              
              if request['active_button_config'] and request['active_button_config'] > 0 < 4:
                desired_state = {
                  "state": {
                    "desired": {
                      "active_button_config": request['active_button_config']
                    }
                  }
                }
                shadow = client.update_thing_shadow(
                  thingName=THING_NAME,
                  payload=json.dumps(desired_state, indent=2).encode('utf-8')
                )

                return({"update_status":"success"})
            
            except Exception as e:
              logger.error("{}".format(e))
              return({"update_status":"failed"}) 

            return({"update_status":"failed"})
      Environment: 
        Variables: 
          THING_NAME: !Ref IoTThing
      FunctionName: updateShadow
      Role: !GetAtt UpdateShadowRole.Arn
  UpdateShadowFunctionUrlPermission:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref UpdateShadowFunction
       FunctionUrlAuthType: 'NONE'
       Action: lambda:InvokeFunctionUrl
       Principal: '*'
  UpdateShadowFunctionUrl:
    Type: AWS::Lambda::Url
    Properties: 
      AuthType: NONE
      Cors: 
        AllowCredentials: false
        AllowOrigins: 
          - "*"
      TargetFunctionArn: !GetAtt UpdateShadowFunction.Arn
  DemoWebApp:
    Type: AWS::Amplify::App
    Properties:
      Name: AWS IoT Device Shadow Demo
      AccessToken: !Ref GithubToken
      CustomHeaders: !Sub |
        customHeaders:
          - pattern: '*'
            headers:
              - key: X-Frame-Options
                value: DENY
              - key: X-XSS-Protection
                value: 1; mode=block
              - key: X-Content-Type-Options
                value: nosniff
              - key: Referrer-Policy
                value: strict-origin-when-cross-origin
              - key: Strict-Transport-Security
                value: 'max-age=31536000; includeSubDomains'
              - key: Content-Security-Policy
                value: >-
                  default-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline';
                  script-src 'self' 'unsafe-inline'; font-src 'self' data:;
                  connect-src ${UpdateShadowFunctionUrl.FunctionUrl} ${GetShadowFunctionUrl.FunctionUrl} 'self'
              - key: Permissions-Policy
                value: >-
                  accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(),
                  camera=(), cross-origin-isolated=(), display-capture=(),
                  document-domain=(), encrypted-media=(),
                  execution-while-not-rendered=(), execution-while-out-of-viewport=(),
                  fullscreen=(self), geolocation=(), gyroscope=(), magnetometer=(),
                  microphone=(), midi=(), navigation-override=(), payment=(),
                  picture-in-picture=(), publickey-credentials-get=(),
                  screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(),
                  xr-spatial-tracking=(), clipboard-read=(), clipboard-write=(),
                  gamepad=(), speaker-selection=(), conversion-measurement=(),
                  focus-without-user-activation=(), hid=(), idle-detection=(),
                  serial=(), sync-script=(), trust-token-redemption=(),
                  vertical-scroll=(self)
      EnableBranchAutoDeletion: False
      EnvironmentVariables: 
        - Name: GATSBY_GET_SHADOW_ENDPOINT
          Value: !GetAtt GetShadowFunctionUrl.FunctionUrl
        - Name: GATSBY_UPDATE_SHADOW_ENDPOINT
          Value: !GetAtt UpdateShadowFunctionUrl.FunctionUrl
        - Name: _CUSTOM_IMAGE
          Value: public.ecr.aws/docker/library/node:18.12.1
      Repository: !Ref GithubRepoUrl
  DemoWebAppBranch:
    Type: AWS::Amplify::Branch
    Properties: 
      AppId: !GetAtt DemoWebApp.AppId
      BranchName: !Ref GithubBranchName
      EnableAutoBuild: True
      EnablePerformanceMode: False
      EnablePullRequestPreview: True
      Stage: EXPERIMENTAL
  DemoWebAppDomain:
    Type: AWS::Amplify::Domain
    Properties: 
      AppId: !GetAtt DemoWebApp.AppId
      DomainName: !Ref DemoWebAppDomainFqdn
      EnableAutoSubDomain: False
      SubDomainSettings:
        - BranchName: !GetAtt DemoWebAppBranch.BranchName
          Prefix: demo

  
